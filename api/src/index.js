
/**
 * Apollo server express based on docs
 * https://www.apollographql.com/docs/apollo-server/integrations/middleware/#apollo-server-express
 */

import * as graphqlschema from "./graphql-schema";
import JsonScalarType from "./units/JsonScalarType"
import { ApolloServer } from "apollo-server-express";
import { ApolloServerPluginDrainHttpServer } from 'apollo-server-core';
import http from 'http';
import express from "express";
import dotenv from "dotenv";
import "babel-polyfill";
import UnitFloatScalarType from "./units/UnitFloatScalarType"

const neo4j = require("neo4j-driver");
const { Neo4jGraphQL } = require("@neo4j/graphql");

// Set environment variables from ../.env
dotenv.config();

// Create express app
const app = express();
const httpServer = http.createServer(app);

// List all custom resolvers
const resolvers = {
  UnitFloat: new UnitFloatScalarType("UnitFloat"),
  Meters: new UnitFloatScalarType("Meters", "m"),
  SquareMeters: new UnitFloatScalarType("SquareMeters", "m2"),
  CubicMilliMeters: new UnitFloatScalarType("CubicMilliMeters", "mm3"),
  CubicMeters: new UnitFloatScalarType("CubicMeters", "m3"),
  Amperes: new UnitFloatScalarType("Amperes", "A"),
  Kiloamperes: new UnitFloatScalarType("Kiloamperes", "kA"),
  Milliamperes: new UnitFloatScalarType("Milliamperes", "mA"),
  Watts: new UnitFloatScalarType("Watts", "W"),
  VoltAmperes: new UnitFloatScalarType("VoltAmperes", "VA"),
  LitersPerSecond: new UnitFloatScalarType("LitersPerSecond", "l_per_s"),
  //LitersPerSecondPerSquareMeters: new UnitFloatScalarType("LitersPerSecondPerSquareMeters", "l_per_s_per_m2"),
  JsonParam: new JsonScalarType("JsonParam")
};

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * injecting the Neo4j driver instance into the context object
 * so it is available in the  generated resolvers
 * to connect to the database.
 */
const startServer = async () => {
  /*
  * Create an executable GraphQL schema object from GraphQL type definitions
  * including autogenerated queries and mutations.  
  */
  const typeDefs = graphqlschema.getTypeDefs();

  /*
  * Create a Neo4j driver instance to connect to the database
  * using credentials specified as environment variables
  * with fallback to defaults
  */
  const driver = neo4j.driver(
    process.env.NEO4J_URI || "bolt://localhost:7687",
    neo4j.auth.basic(
      process.env.NEO4J_USER || "neo4j",
      process.env.NEO4J_PASSWORD || "neo4j"
    )
  );

  const neo4jGraphQL = new Neo4jGraphQL({
    typeDefs,
    resolvers,
    driver
  });

  const schema = neo4jGraphQL.schema;
  //await neo4jGraphQL.assertConstraints({ options: { create: true }});


  const server = new ApolloServer({
    typeDefs,
    resolvers,
    schema,
    context: ({ req }) => ({ req }),
    plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
  });

  await server.start();

  /*
  * Optionally, apply Express middleware for authentication, etc
  * This also also allows us to specify a path for the GraphQL endpoint
  */
  server.applyMiddleware({ app });

  // Specify port and path for GraphQL endpoint
  //this is the internal listen port for the server
  //when used in a docker container, or, the external port
  //when not used in a container
  const port = process.env.GRAPHQL_LISTEN_PORT || 4001;
  const path = "/graphql";

  await new Promise(resolve => httpServer.listen({ port: port, path: path }, resolve));
  console.log(`ðŸš€ Server listening at http://localhost:${port}${path}`);
}

startServer();
