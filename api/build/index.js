"use strict";

var _graphqlSchema = require("./graphql-schema");

var _apolloServerExpress = require("apollo-server-express");

var _apolloServerCore = require("apollo-server-core");

var _http = require("http");

var _http2 = _interopRequireDefault(_http);

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _dotenv = require("dotenv");

var _dotenv2 = _interopRequireDefault(_dotenv);

require("babel-polyfill");

var _UnitFloatScalarType = require("./units/UnitFloatScalarType");

var _UnitFloatScalarType2 = _interopRequireDefault(_UnitFloatScalarType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var neo4j = require("neo4j-driver");

var _require = require("@neo4j/graphql"),
    Neo4jGraphQL = _require.Neo4jGraphQL;

// Set environment variables from ../.env


_dotenv2.default.config();

// Create express app
var app = (0, _express2.default)();
var httpServer = _http2.default.createServer(app);

// List all custom resolvers
var resolvers = {
  UnitFloat: new _UnitFloatScalarType2.default("UnitFloat"),
  Meters: new _UnitFloatScalarType2.default("Meters", "m"),
  SquareMeters: new _UnitFloatScalarType2.default("SquareMeters", "m2"),
  CubicMilliMeters: new _UnitFloatScalarType2.default("CubicMilliMeters", "mm3"),
  CubicMeters: new _UnitFloatScalarType2.default("CubicMeters", "m3"),
  Amperes: new _UnitFloatScalarType2.default("Amperes", "A"),
  Kiloamperes: new _UnitFloatScalarType2.default("Kiloamperes", "kA"),
  Milliamperes: new _UnitFloatScalarType2.default("Milliamperes", "mA"),
  Watts: new _UnitFloatScalarType2.default("Watts", "W"),
  VoltAmperes: new _UnitFloatScalarType2.default("VoltAmperes", "VA"),
  LitersPerSecond: new _UnitFloatScalarType2.default("LitersPerSecond", "l_per_s")
};

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations.  
 */
var neo4jGraphQL = new Neo4jGraphQL({
  typeDefs: _graphqlSchema.typeDefs,
  resolvers: resolvers,
  plugins: [(0, _apolloServerCore.ApolloServerPluginDrainHttpServer)({ httpServer: httpServer })],
  config: {
    auth: {
      isAuthenticated: true,
      hasRole: true
    }
  }
});

var schema = neo4jGraphQL.schema;
console.log(schema);
/*
* Create a Neo4j driver instance to connect to the database
* using credentials specified as environment variables
* with fallback to defaults
*/
var driver = neo4j.driver(process.env.NEO4J_URI || "bolt://localhost:7687", neo4j.auth.basic(process.env.NEO4J_USER || "neo4j", process.env.NEO4J_PASSWORD || "neo4j"));

/*
// Custom middleware to add a user object to the server requests
const injectUser = async req => {
  try {
    var token = req.headers.authorization;
    var stToken = token.substring(7, token.length);
    var nv = await jwt.verify(stToken, JWT_SECRET);
    req.user = { name:nv.preferred_username, id:nv.oid};
    req.groups = nv.groups;
    console.log(req.user);
  } catch (error) {
    console.error(error);
  }
  req.next();
};

app.use(injectUser);
*/

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * injecting the Neo4j driver instance into the context object
 * so it is available in the  generated resolvers
 * to connect to the database.
 */
var startServer = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var server, port, path;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            server = new _apolloServerExpress.ApolloServer({
              context: function context(_ref2) {
                var req = _ref2.req;

                return {
                  driver: driver,
                  req: req,
                  headers: req.headers
                };
              },
              schema: schema,
              introspection: true,
              playground: true
            });
            _context.next = 3;
            return server.start();

          case 3:

            /*
            * Optionally, apply Express middleware for authentication, etc
            * This also also allows us to specify a path for the GraphQL endpoint
            */
            server.applyMiddleware({ app: app });

            // Specify port and path for GraphQL endpoint
            port = process.env.GRAPHQL_LISTEN_PORT || 4001;
            path = "/graphql";
            _context.next = 8;
            return new Promise(function (resolve) {
              return httpServer.listen({ port: port, path: path }, resolve);
            });

          case 8:
            console.log("\uD83D\uDE80 Server listening at http://localhost:" + port + path);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function startServer() {
    return _ref.apply(this, arguments);
  };
}();

startServer();